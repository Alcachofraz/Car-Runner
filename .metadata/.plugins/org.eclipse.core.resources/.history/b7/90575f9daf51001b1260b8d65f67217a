/*
===============================================================================
 Name        : Car_Runner.c
 Author      : PedroG
 Version     : 1.0
 Copyright   : PedroG
 Description : LCD Car game
===============================================================================
*/

#ifdef __USE_CMSIS
#include "LPC17xx.h"
#endif

#include <cr_section_macros.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "wait.h"
#include "button.h"
#include "led.h"
#include "lcd.h"
#include "rtc.h"
#include "flash.h"


/*
 * 	Sector 29 of flash memory will
 * be used to store the 3 best scores,
 * and respective user name.
 *
 * ----------------------------------------
 * |         |         |         |
 * | score 1 | score 2 | score 3 |   ...
 * |         |         |         |
 * ----------------------------------------
 * \________/\________/\________/\________/
 *     16        16        16        208
 * \______________________________________/
 * 				     256
 *
 * 	The program will ask for user name.
 * 	There will be only one score registered per user
 * name. The best one.
 */


/*
===========================================================================================================================================================
===========================================================================================================================================================

	CONSTANTS:

===========================================================================================================================================================
===========================================================================================================================================================
*/

#define CONFIG_OPTIONS 3
#define TIME_CONFIG_FIELDS 6
#define BUTTONS_HOLD_TIME 2000000
#define CURRENT_SCORE_TIME 3000000
#define HIGHLIGHT_BLINK_TIME 300000
#define GAME_SPEED 400000
#define POINTS_SPEED 1000000

#define NAME_LENGTH 11 // Counting with '\0'
#define FLASH_SECTOR 29
#define SCORE_NUM 3
#define MAX_SCORE 9999

#define CAR_BACK_CHAR 0
#define CAR_FRONT_CHAR 1
#define BARRIER_CHAR 2


/*
===========================================================================================================================================================
===========================================================================================================================================================

	STRUCTS:

===========================================================================================================================================================
===========================================================================================================================================================
*/

// Structure to hold car location on LCD Display:
typedef struct {
	int row; // Current row car is on
	int front_column; // Current column front of the car is on
	int back_column; // Current column back of the car is on
} CAR;

// Structure to hold score information:
typedef struct Score { // Score -> 16 bytes
	char name[NAME_LENGTH]; // Name -> 12 bytes
	int32_t score; // Best score -> 4 bytes
} Score;


/*
===========================================================================================================================================================
===========================================================================================================================================================

	FUNCTIONS SIGNATURE:

===========================================================================================================================================================
===========================================================================================================================================================
*/

void getUserName(void);

void updateAndPrintTime(RTC_TIME_FIELD without);

int getScore(Score * score, int n);
void printScore(Score *score, int n);
void eraseScores(void);
void sortScores(Score * scores, int size);
void saveScore(int score);

void buttonsHoldHandler(void);
void idleWait(void);
void idleMode(void);

void busyGameHandler(void);
void invertRow(CAR *car);
void shiftCar(CAR *car);
void randomizeObstacles(int from, int to, int o[LCD_DISPLAY_ROWS][LCD_DDRAM_LENGTH]);
bool checkLoss(CAR *car, int o[LCD_DISPLAY_ROWS][LCD_DDRAM_LENGTH]);
void gameMode(void);

void configurationMode(void);
void blinkHandler(void);
void timeConfig(void);
void yesOrNo(void);
void scoreConfig(void);


/*
===========================================================================================================================================================
===========================================================================================================================================================

	LCD SPECIAL CHARACTERS:

===========================================================================================================================================================
===========================================================================================================================================================
*/

// Back of the car (character):
unsigned char car_back_charmap[] = {
	0x00,
	0x06,
	0x07,
	0x06,
	0x07,
	0x06,
	0x00,
	0x00
};

// Front of the car (character):
unsigned char car_front_charmap[] = {
	0x00,
	0x0C,
	0x1E,
	0x02,
	0x1E,
	0x0C,
	0x00,
	0x00
};

// Obstacle:
unsigned char barrier_charmap[] = {
	0x02,
	0x0E,
	0x02,
	0x02,
	0x02,
	0x0E,
	0x02,
	0x00
};


/*
===========================================================================================================================================================
===========================================================================================================================================================

	USERNAME:

===========================================================================================================================================================
===========================================================================================================================================================
*/

/*
 *  Name of user.
 */
char username[NAME_LENGTH];

/*
 *  Refers to the highlighted field (for blinking
 * purposes).
 */
bool off;

/*
 *  Busy variable (to create the highlighted field
 * blinking delay).
 */
bool blinkBusy;

/*
 * 	Handler for the blinking delay.
 * 	Will invert 'off' (for blinking purposes) and
 * set busy variable to false.
 */
void blinkHandler(void) {
	blinkBusy = false;
	off = !off;
}

/*
 * getUserName(void);
 *
 *	Ask user for a name.
 */
void getUserName(void) {

	LCDText_Clear();
	LCDText_Locate(1, 1);
	LCDText_Printf("User name:", NAME_LENGTH);

	off = false;
	blinkBusy = false;
	int volatile events = 0; // Buttons events
	int ch = 0; // [0, 10] -> Character selected, 11 is the special character '\0'
	char aux[NAME_LENGTH]; // Auxiliary variable for blinking

	while (1) {
		if (!blinkBusy) WAIT_IRQ0_Us(HIGHLIGHT_BLINK_TIME, blinkHandler); // If it's not busy, start counting

		LCDText_Locate(2, 1);
		if (off) {
			strcpy(aux, username);
			aux[ch] = ' ';
			LCDText_Printf(aux);
		}
		else LCDText_Printf(username);

		if ((events = BUTTON_GetButtonsEvents()) != 0) {
			if ((events & B1) && !(BUTTON_Hit() & B1)) { // Increment
				switch (username[ch]) {
					case 32:
						username[ch] = 97;
						break;
					case 122:
						username[ch] = 32;
						break;
					default:
						username[ch]++;
						break;
				}
			}
			else if ((events & B2) && !(BUTTON_Hit() & B2)) { // Decrement
				switch (username[ch]) {
					case 32:
						username[ch] = 122;
						break;
					case 97:
						username[ch] = 32;
						break;
					default:
						username[ch]--;
						break;
				}
			}
			else if ((events & B3) && !(BUTTON_Hit() & B3)) { // Confirm value
				if (ch == 0) username[0] -= 32; // First character must be upper case
				if (++ch > (NAME_LENGTH-2)) { // If it's the last character
					break; // Get out
				}
			}
		}
	}
	while (blinkBusy); // Wait for timer0
	LCDText_Clear();
}


/*
===========================================================================================================================================================
===========================================================================================================================================================

	TIME:

===========================================================================================================================================================
===========================================================================================================================================================
*/

/*
 * updateAndPrintTime(TIME_FIELD without);
 *
 *	Will update read time from RTC and print it to LCD.
 * 	If 'without' != 'NONE', the desired time field will
 * be blank (for blinking purposes)
 */
void updateAndPrintTime(RTC_TIME_FIELD without) {

	struct tm dateTime; // Structure in which RTC time will be written
	char buf[LCD_DISPLAY_COLUMNS]; // Buffer that will hold the time information

	RTC_GetValue(&dateTime); // Write RTC time to structure

	strftime(buf, LCD_DISPLAY_COLUMNS, "%a %d/%m/%Y", &dateTime); // Send structure information to the buffer

	// Add desired blank field, if 'without' != 'NONE':
	switch(without) {
		case DOW:
			buf[0] = ' ';
			buf[1] = ' ';
			buf[2] = ' ';
			break;
		case DOM:
			buf[4] = ' ';
			buf[5] = ' ';
			break;
		case MONTH:
			buf[7] = ' ';
			buf[8] = ' ';
			break;
		case YEAR:
			buf[10] = ' ';
			buf[11] = ' ';
			buf[12] = ' ';
			buf[13] = ' ';
			break;
		default:
			break;
	}
	LCDText_Locate(1, 1);
	LCDText_Printf(buf); // Write first half to LCD

	strftime(buf, LCD_DISPLAY_COLUMNS, "%H:%M:%S", &dateTime);
	switch(without) {
		case HOUR:
			buf[0] = ' ';
			buf[1] = ' ';
			break;
		case MIN:
			buf[3] = ' ';
			buf[4] = ' ';
			break;
		case SEC:
			buf[6] = ' ';
			buf[7] = ' ';
			break;
		default:
			break;
	}
	LCDText_Locate(2, 1);
	LCDText_Printf(buf); // Write second half to LCD
}


/*
===========================================================================================================================================================
===========================================================================================================================================================

	SCORE:

===========================================================================================================================================================
===========================================================================================================================================================
*/

/*
 * getBestScore(Score *bestScore);
 *
 * 	Search for the best score in flash memory.
 */
int getScore(Score * score, int n) {
	if ((n < 0) || (n > SCORE_NUM-1)) return -1;

	Score * scores = (Score *)FLASH_START_ADDRESS_29;
	*score = scores[n];
	return 0;
}

/*
 * printScore(Score *score);
 *
 * 	Print to LCD given score.
 */
void printScore(Score *score, int n) {
	char card[3];
	switch (n) {
		case 0:
			strcpy(card, "st");
			break;
		case 1:
			strcpy(card, "nd");
			break;
		case 2:
			strcpy(card, "rd");
			break;
	}
	if (score->score == 0) {
		LCDText_Locate(1, 1);
		LCDText_Printf("%d%s place:", n+1, card);
		LCDText_Locate(2, 1);
		LCDText_Printf("Not defined.    ");
	}
	else {
		LCDText_Locate(1, 1);
		LCDText_Printf("%d%s place:", n+1, card);
		LCDText_Locate(2, 1);
		LCDText_Printf("%dP %s", score->score, score->name);
	}
}

/*
 * eraseScores(void);
 *
 * 	Erase all scores registered.
 */
void eraseScores(void) {
	FLASH_EraseSectors(FLASH_SECTOR, FLASH_SECTOR);

	// Array of empty scores:
	Score scores[FLASH_MINIMAL_WRITE_SIZE/sizeof(Score)] = {0};

	// Write empty scores:
	FLASH_WriteData(FLASH_SECTOR, (void*) FLASH_START_ADDRESS_29, scores, FLASH_MINIMAL_WRITE_SIZE);
	FLASH_VerifyData((void*) FLASH_START_ADDRESS_29, scores, FLASH_MINIMAL_WRITE_SIZE);
}

/*
 * sortScores(Score * scores, int size);
 *
 * 	Sort scores.
 */
void sortScores(Score * scores, int size) {
	Score temp;
	for (int i = 0; i < size-1; i++) {
		for (int j = 0; j < size-i-1; j++) {
			if (scores[j].score < scores[j+1].score) {
				temp = scores[j];
				scores[j] = scores[j+1];
				scores[j+1] = temp;
			}
		}
	}
}

/*
 * saveScore(char name[NAME_LENGTH], int8_t score);
 *
 * 	Save score to current user.
 */
void saveScore(int score) {
	// Array of old scores to be read:
	Score * oldScores = (Score*)FLASH_START_ADDRESS_29;

	// Array of new scores to be written:
	Score newScores[FLASH_MINIMAL_WRITE_SIZE/sizeof(Score)] = {0};

	bool done = false;
	int lowestScore = 0;

	for (int i = 0; i < SCORE_NUM; i++) {
		newScores[i] = oldScores[i];
		if ((strncmp(newScores[i].name, username, NAME_LENGTH) == 0) && !done) { // If user name coincides...
			if (newScores[i].score < score) { // If the new score is better...
				newScores[i].score = score;
				done = true;
			}
			else return; // If not, return (no need to update flash)
		}
		else if ((newScores[i].score == 0) && !done) { // If there is space available...
			strncpy(newScores[i].name, username, NAME_LENGTH);
			newScores[i].score = score;
			done = true;
		}
		if (newScores[i].score < newScores[lowestScore].score) {
			lowestScore = i;
		}
	}

	if (!done) { // If user name was not found, and there is no space available...
		if (score > newScores[lowestScore].score) { // If score is higher than the lowest registered...
			strncpy(newScores[lowestScore].name, username, NAME_LENGTH);
			newScores[lowestScore].score = score;
		}
	}

	sortScores(newScores, SCORE_NUM);

	// Erase sector before write:
	FLASH_EraseSectors(FLASH_SECTOR, FLASH_SECTOR);

	// Write updated scores:
	FLASH_WriteData(FLASH_SECTOR, (void*) FLASH_START_ADDRESS_29, newScores, FLASH_MINIMAL_WRITE_SIZE);
	FLASH_VerifyData((void*) FLASH_START_ADDRESS_29, newScores, FLASH_MINIMAL_WRITE_SIZE);
}


/*
===========================================================================================================================================================
===========================================================================================================================================================

	IDLE MODE:

===========================================================================================================================================================
===========================================================================================================================================================
*/

/*
 * 	Busy variable (tells if timer is busy counting
 * delay for buttons held).
 */
bool buttonsHoldBusy;

/*
 * 	Handler for the buttons held delay.
 * Will set busy variable to false.
 */
void buttonsHoldHandler(void) {
	buttonsHoldBusy = false;
}

/*
 * 	Busy variable (tells if timer is busy counting
 * delay for changing current score).
 */
bool currentScoreBusy;

/*
 * 	Current score showing in LCD
 */
int currentScore;

/*
 * 	Handler for current score delay.
 * 	Will set busy variable to false, and increment
 * current score.
 */
void currentScoreHandler(void) {
	currentScoreBusy = false;
	if (++currentScore > SCORE_NUM-1) currentScore = 0;
}

/*
 * 	Function to execute in 'BUTTON_WaitRelease()'.
 */
void idleWait(void) {
	updateAndPrintTime(NONE);
}

/*
 * idleMode(void);
 *
 * 	Idle Mode: Fundamental state of the program. The so
 * called "menu".
 * 	In this state, the program will show 2 different types
 * of information: time and best score.
 * 	User may:
 * 	1 - Press B1 to show time;
 * 	2 - Press B2 to show the best score;
 * 	3 - Press B3 to start a game (not implemented);
 * 	4 - Press and hold B1 and B2 at the same time to enter
 * "Configuration Mode".
 */
void idleMode(void) {
	buttonsHoldBusy = false;
	currentScoreBusy = false;
	currentScore = 0;

   	int volatile state = 0; // 0 to show time, 1 to show bets score
   	int volatile events = 0; // Buttons events

   	LCDText_Clear();

   	BUTTON_WaitRelease(idleWait);

   	while (1) {
   		Score bestScore;

   		// State Machine:
   		switch(state) {
   			case 0: // Showing time
				updateAndPrintTime(NONE);
				break;
   			case 1: // Showing best score
   				if (!currentScoreBusy) {
   					WAIT_IRQ1_Us(CURRENT_SCORE_TIME, currentScoreHandler); // Interrupt in CURRENT_SCORE_TIME microseconds
   					currentScoreBusy = true;
   				}
   				getScore(&bestScore, currentScore);
				printScore(&bestScore, currentScore);
				break;
   		}

   		// Input Handler:
   		if ((events = BUTTON_GetButtonsEvents()) != 0) {
			if ((events & B1) && !(BUTTON_Hit() & B1)) { // Show time
				if (state != 0) {
					state = 0;
					LCDText_Clear();
				}
			}
			else if ((events & B2) && !(BUTTON_Hit() & B2)) { // Show best score
				if (state != 1) {
					state = 1;
					LCDText_Clear();
				}
			}
			else if ((events & B3) && !(BUTTON_Hit() & B3)) { // Start a game
				LCDText_Clear();
				while(currentScoreBusy) { // Wait for timer1 because it will be used
					LCDText_Locate(1, 1);
					LCDText_Printf("Starting game...");
				}
				gameMode();
				return;
			}
			else if ((BUTTON_Hit() & B1) && (BUTTON_Hit() & B2)) { // Check for buttons hold, and enter Configuration Mode
				if (buttonsHoldBusy) continue; // If previous interrupt hasn't arrived, get out

				LCDText_Clear();
				LCDText_Locate(1, 1);
				LCDText_Printf("Entering config");
				LCDText_Locate(2, 1);
				LCDText_Printf("mode...");

				WAIT_IRQ0_Us(BUTTONS_HOLD_TIME, buttonsHoldHandler); // Interrupt in BUTTONS_HOLD_TIME microseconds
				buttonsHoldBusy = true;
				while (buttonsHoldBusy) {
					if (!(BUTTON_Hit() & B1) || !(BUTTON_Hit() & B2)) { // If any of the buttons were released
						break;
					}
				}
				if (!buttonsHoldBusy) {
					configurationMode(); // If user held the buttons until this point, enter Configuration Mode
					return;
				}
				LCDText_Clear();
			}
   		}
	}
}


/*
===========================================================================================================================================================
===========================================================================================================================================================

	GAME MODE:

===========================================================================================================================================================
===========================================================================================================================================================
*/

/*
 * 	Points.
 */
int points;

/*
 * 	Busy variable for points increase delay:
 */
bool busyPoints;

/*
 * 	Interrupt handler for points increase delay:
 */
void busyPointsHandler(void) {
	points++;
	busyPoints = false;
}

/*
 * 	Busy variable for game delay:
 */
bool busyGame;

/*
 * 	Interrupt handler for game delay:
 */
void busyGameHandler(void) {
	busyGame = false;
}

/*
 * 	Row the car was on, last time 'shiftCar()' was called:
 */
int last_row;

/*
 * invertRow(CAR * car);
 *
 * 	Invert CAR row:
 */
void invertRow(CAR * car) {
	car->row = (car->row == 2) ? 1 : 2;
}

/*
 * shiftCar(CAR *car);
 *
 * 	Shifts car to the left, by 1 column:
 */
void shiftCar(CAR *car) {
	// Erase current car:
	LCDText_Locate(last_row, car->back_column);
	LCDText_WriteChar(' ');
	LCDText_Locate(last_row, car->front_column);
	LCDText_WriteChar(' ');

	// Increment car position:
	if (++car->back_column > LCD_DDRAM_LENGTH) car->back_column = 1;
	if (++car->front_column > LCD_DDRAM_LENGTH) car->front_column = 1;

	// Write car:
	LCDText_Locate(car->row, car->back_column);
	LCDText_WriteChar(CAR_BACK_CHAR);
	LCDText_Locate(car->row, car->front_column);
	LCDText_WriteChar(CAR_FRONT_CHAR);

	// Update last_row:
	last_row = car->row;
}

/*
 * randomizeObstacles(int from, int to, int o[LCD_DISPLAY_ROWS][LCD_DDRAM_LENGTH]);
 *
 * 	Randomise obstacles (and write to LCD) from row 'from' to
 * row 'to':
 */
void randomizeObstacles(int from, int to, int o[LCD_DISPLAY_ROWS][LCD_DDRAM_LENGTH]) {
	for (int i=from; i<=to; i++) {
		// Erase obstacles from array of obstacles:
		o[0][i-1] = 0;
		o[1][i-1] = 0;

		// Erase obstacles from LCD:
		LCDText_Locate(1, i);
		LCDText_WriteChar(' ');
		LCDText_Locate(2, i);
		LCDText_WriteChar(' ');
	}
	srand(RTC_GetSeconds()); // Set randomiser seed to RTC time_t value

	// Randomise first column:
	int col = from;
	col += rand()%3+3; // Always leave a space of 2-4 columns between each obstacle

	int row;

	while(col <= to) {
		// Randomise row:
		row = rand()%2+1;

		// Write obstacle in LCD:
		LCDText_Locate(row, col);
		LCDText_WriteChar(BARRIER_CHAR);
		// Write obstacle in array of obstacles:
		o[row-1][col-1] = 1;

		// Randomise next column:
		col += rand()%3+3; // Always leave a space of 2-4 columns between each obstacle
	}
}

/*
 * checkLoss(CAR *car, int o[LCD_DISPLAY_ROWS][LCD_DDRAM_LENGTH]);
 *
 * 	Check if car as hit a barrier.
 */
bool checkLoss(CAR *car, int o[LCD_DISPLAY_ROWS][LCD_DDRAM_LENGTH]) {
	return o[car->row-1][car->back_column-1] || o[car->row-1][car->front_column-1];
}

/*
 * gameMode(void);
 *
 * 	General Configuration Mode: State of the program
 * in which the user may:
 *  1 - Adjust the clock;
 *  2 - Clear the best score (not implemented).
 * 	To do so, navigate through the options, using B1
 * and B2, and select, using B3.
 */
void gameMode(void) {

	LCDText_Clear();

	LCDText_Locate(1, 1);
	LCDText_Printf("Press any button");
	LCDText_Locate(2, 1);
	LCDText_Printf("to start.");

	// Car:
	CAR car = {.row = 1, .front_column = 3, .back_column = 2};

	// Array that represents all current obstacles in LCD DDRAM
	int o[LCD_DISPLAY_ROWS][LCD_DDRAM_LENGTH] = {0};

	points = 1;
	busyPoints = false;
	busyGame = false;
	last_row = 1;

	while(BUTTON_GetButtonsEvents() == 0) {} // Wait for user to ready up
	LCDText_Clear();

	randomizeObstacles(4, 40, o); // Randomise obstacles from column 5 to column 20

	while(1) {
		if ((BUTTON_GetButtonsEvents() & B3) && (BUTTON_Hit() & B3)) {
			invertRow(&car);
		}
		if (!busyPoints) { // Points delay
			WAIT_IRQ1_Us(POINTS_SPEED, busyPointsHandler);
			busyPoints = true;
		}
		if (!busyGame) {
			// Refresh obstacles:
			if (car.front_column == 23) { // If display is showing [21, 36]
				randomizeObstacles(1, 20, o); // Refresh first 20
			}
			if (car.front_column == 3) { // If display is showing [1, 16]
				randomizeObstacles(21, 40, o); // Refresh last 20
			}

			// Shift car:
			shiftCar(&car);

			// Shift display:
			LCDText_ShiftDisplay(LEFT);

			// Verify if car hit an obstacle:
			if (checkLoss(&car, o)) { // Lose
				LCDText_Clear();
				LCDText_Home();
				LCDText_Printf("Game over. Press");
				LCDText_Locate(2, 1);
				LCDText_Printf("any button.");

				saveScore(points);

				BUTTON_WaitRelease(0);
				BUTTON_Read();

				while(busyGame) { // Wait for timer1 (because it will be used in idle mode)
					LCDText_Locate(1, 1);
					LCDText_Printf("Returning");
					LCDText_Locate(2, 1);
					LCDText_Printf("to menu...");
				}
				break;
			}

			// Delay:
			WAIT_IRQ0_Us(GAME_SPEED, busyGameHandler);
			busyGame = true;
		}
	}
}


/*
===========================================================================================================================================================
===========================================================================================================================================================

	CONFIGURATION NAME

===========================================================================================================================================================
===========================================================================================================================================================
*/

/*
 * configurationMode(void);
 *
 * 	General Configuration Mode: State of the program
 * in which the user may:
 *  1 - Adjust the clock;
 *  2 - Clear the best score (not implemented).
 * To do so, navigate through the options, using B1
 * and B2, and select, using B3.
 */
void configurationMode(void) {
	LCDText_Clear();
	LCDText_Locate(1, 1);
	LCDText_Printf("> Time Config");
	LCDText_Locate(2, 1);
	LCDText_Printf("  Score Config");

	BUTTON_WaitRelease(0);

	int volatile events = 0; // Buttons events
	int volatile last_option = 0; // Last selected option
	int volatile option = 0; // Current selected option

	while (1) {
		// State Machine:
		switch (option) {
			case 0: // Time Configuration option highlighted
				LCDText_Locate(1, 1);
				LCDText_Printf("> Time Config");
				LCDText_Locate(2, 1);
				LCDText_Printf("  Score Config");
				break;
			case 1: // Best Score Configuration option highlighted
				switch(last_option) {
					case 0:
						LCDText_Locate(1, 1);
						LCDText_Printf("  Time Config");
						LCDText_Locate(2, 1);
						LCDText_Printf("> Score Config");
						break;
					case 2:
						LCDText_Locate(1, 1);
						LCDText_Printf("> Score Config");
						LCDText_Locate(2, 1);
						LCDText_Printf("  Name Config");
						break;
				}
				break;
			case 2:
				LCDText_Locate(1, 1);
				LCDText_Printf("  Score Config");
				LCDText_Locate(2, 1);
				LCDText_Printf("> Name Config");
		}

		// Input Handler:
		if ((events = BUTTON_GetButtonsEvents()) != 0) {
			if ((events & B1) && !(BUTTON_Hit() & B1)) { // Go to upper option
				last_option = option;
				if (++option > (CONFIG_OPTIONS-1)) option = CONFIG_OPTIONS-1;
			}
			else if ((events & B2) && !(BUTTON_Hit() & B2)) { // Go to lower option
				last_option = option;
				if (--option < 0) option = 0;
			}
			else if ((events & B3) && !(BUTTON_Hit() & B3)) { // Select option
				switch (option) {
					case 0: // Time Configuration:
						timeConfig();
						break;
					case 1: // Score Configuration:
						scoreConfig();
						break;
					case 2: // Name Configuration:
						getUserName();
						break;
				}
			}
			else if ((BUTTON_Hit() & B1) && (BUTTON_Hit() & B2)) { // Check for buttons hold, and go back to menu
				if (buttonsHoldBusy) continue; // If previous interrupt hasn't arrived, get out

				LCDText_Clear();
				LCDText_Locate(1, 1);
				LCDText_Printf("Returning to");
				LCDText_Locate(2, 1);
				LCDText_Printf("menu...");

				WAIT_IRQ0_Us(BUTTONS_HOLD_TIME, buttonsHoldHandler); // Interrupt in 2 seconds
				buttonsHoldBusy = 1;
				while (buttonsHoldBusy) {
					if (!(BUTTON_Hit() & B1) || !(BUTTON_Hit() & B2)) { // If any of the buttons were released
						break;
					}
				}
				if (buttonsHoldBusy == 0) break; // If user held the buttons until this point, return to idle mode
				LCDText_Clear();
			}
		}
	}
}


/*
===========================================================================================================================================================
===========================================================================================================================================================

	TIME CONFIGURATION:

===========================================================================================================================================================
===========================================================================================================================================================
*/

/*
 * timeConfig(void);
 *
 * 	Time Configuration Mode: User may adjust
 * the clock, using B1 and B2 to increment and
 * decrement the highlighted field.
 * 	To confirm the chosen value, press B3 to
 * jump to the next field.
 * 	After going through all fields, program
 * goes back to General Configuration mode.
 */
void timeConfig(void) {

	LCDText_Clear();
	RTC_Disable(); // Disable RTC counters, to stop the clock while adjusting it

	int volatile events = 0; // Buttons events

	int field = 0; // [0, 5] -> Every time field, excluding day of year and seconds
	RTC_TIME_FIELD timeFields[TIME_CONFIG_FIELDS] = {YEAR, MONTH, DOM, DOW, HOUR, MIN};

	while (1) {
		if (!blinkBusy) WAIT_IRQ0_Us(HIGHLIGHT_BLINK_TIME, blinkHandler); // If it's not busy, start counting

		if (off) updateAndPrintTime(timeFields[field]); // Set field to blank
		else updateAndPrintTime(NONE); // Set field to its current value

		if ((events = BUTTON_GetButtonsEvents()) != 0) {
			if ((events & B1) && !(BUTTON_Hit() & B1)) { // Increment
				RTC_IncrementField(timeFields[field]);
			}
			else if ((events & B2) && !(BUTTON_Hit() & B2)) { // Decrement
				RTC_DecrementField(timeFields[field]);
			}
			else if ((events & B3) && !(BUTTON_Hit() & B3)) { // Confirm value
				LCDText_Clear();
				if (++field > (TIME_CONFIG_FIELDS-1)) { // If it's the last field
					RTC_Enable(); // Enable RTC counters again
					break; // Get out
				}
			}
		}
	}
}


/*
===========================================================================================================================================================
===========================================================================================================================================================

	SCORE CONFIGURATION:

===========================================================================================================================================================
===========================================================================================================================================================
*/

/*
 * yesOrNo(void);
 *
 * 	User needs to confirm action.
 */

void yesOrNo(void) {
	LCDText_Clear();

	LCDText_Locate(1, 1);
	LCDText_Printf("> Yes");
	LCDText_Locate(2, 1);
	LCDText_Printf("  No");

	BUTTON_WaitRelease(0);

	int volatile events = 0; // Buttons events
	int volatile option = 0; // 0 for yes, 1 for no

	while (1) {
		// State Machine:
		switch (option) {
			case 0: // Yes option highlighted
				LCDText_Locate(1, 1);
				LCDText_Printf("> Yes");
				LCDText_Locate(2, 1);
				LCDText_Printf("  No");
				break;
			case 1: // No option highlighted
				LCDText_Locate(1, 1);
				LCDText_Printf("  Yes");
				LCDText_Locate(2, 1);
				LCDText_Printf("> No");
				break;
		}

		// Input Handler:
		if ((events = BUTTON_GetButtonsEvents()) != 0) {
			if ((events & B1) && !(BUTTON_Hit() & B1)) { // Go to upper option
				if (++option > 1) option = 1;
			}
			else if ((events & B2) && !(BUTTON_Hit() & B2)) { // Go to lower option
				if (--option < 0) option = 0;
			}
			else if ((events & B3) && !(BUTTON_Hit() & B3)) { // Select option
				switch (option) {
					case 0: // Yes:
						eraseScores();

						LCDText_Clear();
						LCDText_Locate(1, 1);
						LCDText_Printf("Erased. Press");
						LCDText_Locate(2, 1);
						LCDText_Printf("any button.");

						BUTTON_WaitRelease(0);
						BUTTON_Read();

						LCDText_Clear();
						return;
					case 1: // No:
						LCDText_Clear();
						return;
				}
			}
		}
	}
}

/*
 * scoreConfig(void);
 *
 * 	Score Configuration Mode: User may erase
 * all registered scores.
 */

void scoreConfig(void) {
	LCDText_Clear();

	LCDText_Locate(1, 1);
	LCDText_Printf("> Erase scores");
	LCDText_Locate(2, 1);
	LCDText_Printf("  Back");

	BUTTON_WaitRelease(0);

	int volatile events = 0; // Buttons events
	int volatile option = 0; // 0 for erase scores, 1 for back

	while (1) {
		// State Machine:
		switch (option) {
			case 0: // Yes option highlighted
				LCDText_Locate(1, 1);
				LCDText_Printf("> Erase scores");
				LCDText_Locate(2, 1);
				LCDText_Printf("  Back");
				break;
			case 1: // No option highlighted
				LCDText_Locate(1, 1);
				LCDText_Printf("  Erase scores");
				LCDText_Locate(2, 1);
				LCDText_Printf("> Back");
				break;
		}

		// Input Handler:
		if ((events = BUTTON_GetButtonsEvents()) != 0) {
			if ((events & B1) && !(BUTTON_Hit() & B1)) { // Go to upper option
				if (++option > 1) option = 1;
			}
			else if ((events & B2) && !(BUTTON_Hit() & B2)) { // Go to lower option
				if (--option < 0) option = 0;
			}
			else if ((events & B3) && !(BUTTON_Hit() & B3)) { // Select option
				switch (option) {
					case 0: // Erase sectors:
						yesOrNo();
						BUTTON_WaitRelease(0);
						break;
					case 1: // back:
						LCDText_Clear();
						return;
				}
			}
		}
	}
}


/*
===========================================================================================================================================================
===========================================================================================================================================================

	MAIN:

===========================================================================================================================================================
===========================================================================================================================================================
*/

/*
 * 	Main:
 */
int main(void) {

 	SystemInit();
	BUTTON_Init();
	RTC_Init(0, INONE);
	if (LCDText_Init() < 0) {
		printf("LCD could not initialise.\n");
		return 0;
	}
	if (WAIT_Init(IRQ0) < 0) {
		printf("WAIT Resource 0 could not initialise.\n");
		return 0;
	}
	if (WAIT_Init(IRQ1) < 0) {
		printf("WAIT Resource 1 could not initialise.\n");
		return 0;
	}

	LCDText_CreateChar(CAR_BACK_CHAR, car_back_charmap);
	LCDText_CreateChar(CAR_FRONT_CHAR, car_front_charmap);
	LCDText_CreateChar(BARRIER_CHAR, barrier_charmap);

	for (int i = 0; i < NAME_LENGTH-1; i++) {
		username[i] = 'a';
	}
	username[NAME_LENGTH-1] = '\0';

	getUserName();

	while(1) {idleMode();}

    return 0 ;
}
